// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import types "github.com/docker/docker/api/types"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Erase provides a mock function with given fields: serverAddress
func (_m *Store) Erase(serverAddress string) error {
	ret := _m.Called(serverAddress)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serverAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: serverAddress
func (_m *Store) Get(serverAddress string) (types.AuthConfig, error) {
	ret := _m.Called(serverAddress)

	var r0 types.AuthConfig
	if rf, ok := ret.Get(0).(func(string) types.AuthConfig); ok {
		r0 = rf(serverAddress)
	} else {
		r0 = ret.Get(0).(types.AuthConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serverAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Store) GetAll() (map[string]types.AuthConfig, error) {
	ret := _m.Called()

	var r0 map[string]types.AuthConfig
	if rf, ok := ret.Get(0).(func() map[string]types.AuthConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]types.AuthConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: authConfig
func (_m *Store) Store(authConfig types.AuthConfig) error {
	ret := _m.Called(authConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.AuthConfig) error); ok {
		r0 = rf(authConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
